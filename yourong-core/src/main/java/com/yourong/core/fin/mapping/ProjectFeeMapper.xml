<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yourong.core.fin.dao.ProjectFeeMapper" >
  <resultMap id="BaseResultMap" type="com.yourong.core.fin.model.ProjectFee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="project_id" property="projectId" jdbcType="BIGINT" />
    <result column="member_id" property="memberId" jdbcType="BIGINT" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="fee_status" property="feeStatus" jdbcType="INTEGER" />
    <result column="fee_type" property="feeType" jdbcType="INTEGER" />
    <result column="gather_time" property="gatherTime" jdbcType="TIMESTAMP" />
    <result column="return_time" property="returnTime" jdbcType="TIMESTAMP" />
    <result column="remarks" property="remarks" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="del_flag" property="delFlag" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, project_id, member_id, amount, fee_status, fee_type, gather_time, return_time, 
    remarks, update_time, create_time, del_flag
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from ic_project_fee
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from ic_project_fee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.yourong.core.fin.model.ProjectFee" >
    insert into ic_project_fee (id, project_id, member_id, amount, 
       fee_status, fee_type, gather_time, return_time,
      remarks, update_time, create_time, 
      del_flag)
    values (#{id,jdbcType=BIGINT}, #{projectId,jdbcType=BIGINT}, #{memberId,jdbcType=BIGINT}, #{amount,jdbcType=DECIMAL}, 
      #{feeStatus,jdbcType=INTEGER}, #{feeType,jdbcType=INTEGER}, #{gatherTime,jdbcType=TIMESTAMP}, #{returnTime,jdbcType=TIMESTAMP}, 
      #{remarks,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, 
      #{delFlag,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.yourong.core.fin.model.ProjectFee" >
    insert into ic_project_fee
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="projectId != null" >
        project_id,
      </if>
       <if test="memberId != null" >
        member_id,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="feeStatus != null" >
        fee_status,
      </if>
      <if test="feeType != null" >
        fee_type,
      </if>
      <if test="gatherTime != null" >
        gather_time,
      </if>
      <if test="returnTime != null" >
        return_time,
      </if>
      <if test="remarks != null" >
        remarks,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="projectId != null" >
        #{projectId,jdbcType=BIGINT},
      </if>
       <if test="memberId != null" >
        #{memberId,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="feeStatus != null" >
        #{feeStatus,jdbcType=INTEGER},
      </if>
       <if test="feeType != null" >
        #{feeType,jdbcType=INTEGER},
      </if>
      <if test="gatherTime != null" >
        #{gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="returnTime != null" >
        #{returnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null" >
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yourong.core.fin.model.ProjectFee" >
    update ic_project_fee
    <set >
      <if test="projectId != null" >
        project_id = #{projectId,jdbcType=BIGINT},
      </if>
       <if test="memberId != null" >
        member_id = #{memberId,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="feeStatus != null" >
        fee_status = #{feeStatus,jdbcType=INTEGER},
      </if>
       <if test="feeType != null" >
        fee_type = #{feeType,jdbcType=INTEGER},
      </if>
      <if test="gatherTime != null" >
        gather_time = #{gatherTime,jdbcType=TIMESTAMP},
      </if>
       <if test="returnTime != null" >
        return_time = #{returnTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null" >
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
        update_time = now(),
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null" >
        del_flag = #{delFlag,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yourong.core.fin.model.ProjectFee" >
    update ic_project_fee
    set project_id = #{projectId,jdbcType=BIGINT},
    	member_id = #{memberId,jdbcType=BIGINT},
      amount = #{amount,jdbcType=DECIMAL},
      fee_status = #{feeStatus,jdbcType=INTEGER},
      fee_type = #{feeType,jdbcType=INTEGER},
      gather_time = #{gatherTime,jdbcType=TIMESTAMP},
      return_time = #{returnTime,jdbcType=TIMESTAMP},
      remarks = #{remarks,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
   <select id="getManageMentFeeByProjectId" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from ic_project_fee
    where project_id = #{projectId,jdbcType=BIGINT}
  </select>
  
  
  <sql id="Loan_Base_Column_List_Pagin">
		t.id as id ,
		t.project_id as project_id,
		t.amount as amount,
		t.fee_status as fee_status,
		t.fee_type as fee_type,
		t.gather_time as gather_time,
		t.return_time as return_time,
		t.remarks as remarks,
		t.update_time as update_time,
		t.create_time as create_time,
		t.del_flag as del_flag,
		t.member_id as member_id,
		p.name as project_name,
		p.security_type as security_type,
		p.online_time as online_time,
		p.sale_end_time as sale_end_time,
		p.total_amount as total_amount,
		p.borrow_period as borrow_period,
		p.borrow_period_type as borrow_period_type,
		p.annualized_rate as annualized_rate,
		p.manage_fee_rate as manage_fee_rate,
		p.guarantee_fee_rate as guarantee_fee_rate,
		p.risk_fee_rate as risk_fee_rate,
		p.introducer_fee_rate as introducer_fee_rate,
		m.true_name as borrower_name,
		m.mobile  as mobile
	</sql>
  
  <resultMap id="ExtendResultMap" type="com.yourong.core.fin.model.ProjectFee" extends="BaseResultMap">
		<result column="project_name" property="projectName" jdbcType="VARCHAR" />
		<result column="security_type" property="securityType" jdbcType="VARCHAR" />
		<result column="online_time" property="onlineTime" jdbcType="TIMESTAMP" />
		<result column="sale_end_time" property="saleEndTime" jdbcType="TIMESTAMP" />
		<result column="total_amount" property="totalAmount" jdbcType="DECIMAL" />
		<result column="borrow_period" property="borrowPeriod" jdbcType="INTEGER" />
		<result column="borrow_period_type" property="borrowPeriodType" jdbcType="INTEGER" />
		<result column="annualized_rate" property="annualizedRate" jdbcType="DECIMAL" />
		<result column="borrower_name" property="borrowerName" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="BIGINT" />
		<result column="manage_fee_rate" property="manageFeeRate" jdbcType="DECIMAL" />
		<result column="guarantee_fee_rate" property="guaranteeFeeRate" jdbcType="DECIMAL" />
		<result column="risk_fee_rate" property="riskFeeRate" jdbcType="DECIMAL" />
		<result column="introducer_fee_rate" property="introducerFeeRate" jdbcType="DECIMAL" />
	</resultMap>
  
  <select id="selectManageFeeForPagin" resultMap="ExtendResultMap">
		select
		<include refid="Loan_Base_Column_List_Pagin" />
		from ic_project_fee as t
		left join ic_project as p on t.project_id = p.id
		LEFT JOIN uc_member as m on m.id = p.borrower_id
		where t.del_flag>0 and p.invest_type = 2 
		<if test=" map != null">
			<if test=" map.securityType != null">
				and p.security_type = #{map.securityType}
			</if>
			<if test=" map.projectName != null">
				and p.name like  #{map.projectName} "%"  
			</if>
			<if test=" map.projectId != null">
				and t.project_id = #{map.projectId}
			</if>
			<if test=" map.mobile != null">
				and m.mobile = #{map.mobile}
			</if>
			<if test=" map.feeType != null">
				and t.fee_type = #{map.feeType}
			</if>
			<if test="map.feeStatus !=null">
				<if test="map.feeStatus==1">
					and t.fee_status in (1,2)
				</if>
				<if test="map.feeStatus==3">
					and t.fee_status  in (3,4)
				</if>
				<if test="map.feeStatus==5">
					and t.fee_status  = 5
				</if>
		  	</if>
			<if test=" map.debtType != null">
				and p.security_type = #{map.debtType}
			</if>
			<if test=" map.gatherStartTime != null">
				and t.gather_time <![CDATA[>=]]> #{map.gatherStartTime}
			</if>
			<if test=" map.gatherEndTime != null">
				and t.gather_time <![CDATA[<=]]> #{map.gatherEndTime}
			</if>
			
			<if test=" map.returnStartTime != null">
				and t.return_time <![CDATA[>=]]> #{map.returnStartTime}
			</if>
			<if test=" map.returnEndTime != null">
				and t.return_time <![CDATA[<=]]> #{map.returnEndTime}
			</if>
			<if test="map.borrowerName != null">
				 and m.true_name = #{map.borrowerName}
			</if>
			<if test=" map.status != null">
				and p.status in 
				<foreach collection="map.status" index="index" item="item" open="(" separator="," close=")"> #{item}  </foreach> 
			</if>
		</if>
		<choose>
			<when test=" map != null">
				<if test=" map.desc != null  ">
					order by ${map.desc} desc
				</if>
				<if test=" map.asc != null ">
					order by ${map.asc} asc
				</if>
			</when>
		</choose>
		LIMIT ${map.startRow}, ${map.pageSize} 
	</select>
	<select id="selectManageFeeForPaginTotalCount" resultType="java.lang.Integer">
		select count(1)
		from ic_project_fee as t
		left join ic_project as p on t.project_id = p.id
		LEFT JOIN uc_member as m on m.id = p.borrower_id
		where t.del_flag>0 and p.invest_type = 2 
		<if test=" map != null">
			<if test=" map.securityType != null">
				and p.security_type = #{map.securityType}
			</if>
			<if test=" map.projectName != null">
				and p.name like #{map.projectName}"%"
			</if>
			<if test=" map.projectId != null">
				and t.project_id = #{map.projectId}
			</if>
			<if test=" map.mobile != null">
				and m.mobile = #{map.mobile}
			</if>
			<if test=" map.feeType != null">
				and t.fee_type = #{map.feeType}
			</if>
			<if test="map.feeStatus !=null">
				<if test="map.feeStatus==1">
					and t.fee_status in (1,2)
				</if>
				<if test="map.feeStatus==3">
					and t.fee_status  = 3
				</if>
				<if test="map.feeStatus==5">
					and t.fee_status  = 5
				</if>
		  	</if>
			<if test=" map.debtType != null">
				and p.security_type = #{map.debtType}
			</if>
			<if test=" map.gatherStartTime != null">
				and t.gather_time <![CDATA[>=]]> #{map.gatherStartTime}
			</if>
			<if test=" map.gatherEndTime != null">
				and t.gather_time <![CDATA[<=]]> #{map.gatherEndTime}
			</if>
			
			<if test=" map.returnStartTime != null">
				and t.return_time <![CDATA[>=]]> #{map.returnStartTime}
			</if>
			<if test=" map.returnEndTime != null">
				and t.return_time <![CDATA[<=]]> #{map.returnEndTime}
			</if>
			<if test="map.borrowerName != null">
				 and m.true_name = #{map.borrowerName}
			</if>
			<if test=" map.status != null">
				and p.status in 
				<foreach collection="map.status" index="index" item="item" open="(" separator="," close=")"> #{item}  </foreach> 
			</if>
		</if>
	</select>
	
  	<!-- 收取之后更新管理费状态和实际收取值 -->
  	<update id="updateAfterGatherFee">
  		UPDATE ic_project_fee
			SET fee_status = #{afterStatus,jdbcType=INTEGER},
			 update_time = now(),
			 gather_time = NOW(),
			 amount = #{amount,jdbcType=DECIMAL}
			WHERE
				fee_status = #{beforeStatus,jdbcType=INTEGER}
			AND project_id = #{projectId,jdbcType=BIGINT}
  	</update>
  	
  	<!-- 更新状态根据项目id-->
  	<update id="updateStatus">
  		UPDATE ic_project_fee
			SET fee_status = #{afterStatus,jdbcType=INTEGER},
			 update_time = now()
			WHERE
				fee_status = #{beforeStatus,jdbcType=INTEGER}
			AND project_id = #{projectId,jdbcType=BIGINT}
  	</update>
  	<!-- 根据项目id更新项目服务费 -->
  	<update id="updateProjectFeeByProjectId">
		update  
		ic_project_fee set fee_status= #{feeStatus,jdbcType=INTEGER}
		 <if test="feeStatus ==3" >
          , gather_time = NOW() 
      </if> 
		where  project_id = #{projectId,jdbcType=BIGINT} and fee_type = #{feeType,jdbcType=INTEGER}
	</update>
	<!-- 查询服务费根据 projectId 和 feeType -->
	<select id="getProjectFeeByProjectIdType" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from ic_project_fee
    where project_id = #{projectId,jdbcType=BIGINT} and fee_type = #{feeType,jdbcType=INTEGER} 
  </select>
  
  <!-- 归还费用之后的状态更新 -->
  <update id="updateAfterReturnFee">
    update ic_project_fee 
    set 
    return_time = now(),
    update_time = now(),
    fee_status = #{afterStatus,jdbcType=INTEGER}
  	where fee_status =#{beforeStatus,jdbcType=INTEGER}  and id = #{id,jdbcType=BIGINT} 
  </update>
</mapper>